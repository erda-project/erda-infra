// Copyright (c) 2021 Terminus, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package main

import (
	"google.golang.org/protobuf/compiler/protogen"
)

const (
	stringsPackage   = protogen.GoImportPath("strings")
	protojsonPackage = protogen.GoImportPath("google.golang.org/protobuf/encoding/protojson")
	base64Package    = protogen.GoImportPath("encoding/base64")
	jsonPackage      = protogen.GoImportPath("encoding/json")
	strconvPackage   = protogen.GoImportPath("strconv")
)

func generateFile(gen *protogen.Plugin, file *protogen.File) (*protogen.GeneratedFile, error) {
	filename := file.GeneratedFilenamePrefix + ".json.pb.go"
	g := gen.NewGeneratedFile(filename, file.GoImportPath)
	g.P("// Code generated by ", genName, ". DO NOT EDIT.")
	g.P("// Source: ", file.Desc.Path())
	g.P()
	g.P("package ", file.GoPackageName)
	g.P()

	g.P("// This is a compile-time assertion to ensure that this generated file")
	g.P("// is compatible with the ", jsonPackage, " package it is being compiled against.")
	for _, message := range file.Messages {
		g.P("var _ ", jsonPackage.Ident("Marshaler"), " = ", "(*", message.GoIdent.GoName, ")(nil)")
		g.P("var _ ", jsonPackage.Ident("Unmarshaler"), " = ", "(*", message.GoIdent.GoName, ")(nil)")
	}
	for _, message := range file.Messages {
		err := genMessage(gen, file, g, message)
		if err != nil {
			return g, err
		}
	}
	g.P()
	return g, nil
}

func genMessage(gen *protogen.Plugin, file *protogen.File, g *protogen.GeneratedFile, message *protogen.Message) error {
	g.P()
	g.P("// ", message.GoIdent.GoName, " implement ", jsonPackage.Ident("Marshaler"), ".")
	g.P("func (m *", message.GoIdent.GoName, ") MarshalJSON() ([]byte, error) {")
	g.P("	return (&", protojsonPackage.Ident("MarshalOptions"), "{")
	g.P("		UseProtoNames: ", origName, ",")
	g.P("		UseEnumNumbers: ", enumsAsInts, ",")
	g.P("		EmitUnpopulated: ", emitDefaults, ",")
	g.P("	}).Marshal(m)")
	g.P("}")
	g.P()

	g.P("// ", message.GoIdent.GoName, " implement ", jsonPackage.Ident("Marshaler"), ".")
	g.P("func (m *", message.GoIdent.GoName, ") UnmarshalJSON(b []byte) error {")
	g.P("	return (&", protojsonPackage.Ident("UnmarshalOptions"), "{")
	g.P("		DiscardUnknown: ", allowUnknownFields, ",")
	g.P("	}).Unmarshal(b, m)")
	g.P("}")
	return nil
}
