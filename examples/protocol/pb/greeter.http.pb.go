// Code generated by protoc-gen-go-http. DO NOT EDIT.
// Source: greeter.proto

package pb

import (
	context "context"
	http1 "net/http"

	http "github.com/erda-project/erda-infra/pkg/transport/http"
	urlenc "github.com/erda-project/erda-infra/pkg/urlenc"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the "github.com/erda-project/erda-infra/pkg/transport/http" package it is being compiled against.
const _ = http.SupportPackageIsVersion1

// GreeterServiceHandler is the server API for GreeterService service.
type GreeterServiceHandler interface {
	// say hello
	// GET /api/hello/{name}
	SayHello(context.Context, *HelloRequest) (*HelloResponse, error)
}

// RegisterGreeterServiceHandler register GreeterServiceHandler to http.Router.
func RegisterGreeterServiceHandler(r http.Router, srv GreeterServiceHandler, opts ...http.HandleOption) {
	h := http.DefaultHandleOptions()
	for _, op := range opts {
		op(h)
	}
	type ConvertFunc func(http1.ResponseWriter, *http1.Request) (interface{}, error)
	encodeFunc := func(fn ConvertFunc) http.HandlerFunc {
		return func(w http1.ResponseWriter, r *http1.Request) {
			out, err := fn(w, r)
			if err != nil {
				h.Error(w, r, err)
				return
			}
			if err := h.Encode(w, r, out); err != nil {
				h.Error(w, r, err)
			}
		}
	}

	convert_SayHello_to_HandlerFunc := func(fn func(context.Context, *HelloRequest) (*HelloResponse, error)) ConvertFunc {
		handler := func(ctx context.Context, req interface{}) (interface{}, error) {
			return fn(ctx, req.(*HelloRequest))
		}
		if h.Interceptor != nil {
			handler = h.Interceptor(handler)
		}
		return func(w http1.ResponseWriter, r *http1.Request) (interface{}, error) {
			var in HelloRequest
			if err := h.Decode(r, &in); err != nil {
				return nil, err
			}
			var input interface{} = &in
			if u, ok := (input).(urlenc.URLValuesUnmarshaler); ok {
				if err := u.UnmarshalURLValues("", r.URL.Query()); err != nil {
					return nil, err
				}
			}
			out, err := handler(r.Context(), &in)
			if err != nil {
				return out, err
			}
			return out, nil
		}
	}

	r.Add("GET", "/api/hello/{name}", encodeFunc(convert_SayHello_to_HandlerFunc(srv.SayHello)))
}
