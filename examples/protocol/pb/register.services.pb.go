// Code generated by protoc-gen-go-register. DO NOT EDIT.
// Source: greeter.proto, user.proto

package pb

import (
	reflect "reflect"

	grpc "github.com/erda-project/erda-infra/pkg/transport/grpc"
	http "github.com/erda-project/erda-infra/pkg/transport/http"
)

// RegisterServices register all services.
func RegisterServices(router_ http.Router, server_ grpc.ServiceRegistrar,
	// greeter.proto
	greeterService GreeterServiceServer,
	// user.proto
	userService UserServiceServer,
) {
	// greeter.proto
	RegisterGreeterServiceHandler(router_, GreeterServiceHandler(greeterService))
	RegisterGreeterServiceServer(server_, greeterService)
	// user.proto
	RegisterUserServiceHandler(router_, UserServiceHandler(userService))
	RegisterUserServiceServer(server_, userService)
}

// ServiceNames return all service names
func ServiceNames(svr ...string) []string {
	return append(svr,
		"erda.infra.example.GreeterService",
		"erda.infra.example.UserService",
	)
}

var (
	greeterServiceClientType = reflect.TypeOf((*GreeterServiceClient)(nil)).Elem()
	greeterServiceServerType = reflect.TypeOf((*GreeterServiceServer)(nil)).Elem()

	userServiceClientType = reflect.TypeOf((*UserServiceClient)(nil)).Elem()
	userServiceServerType = reflect.TypeOf((*UserServiceServer)(nil)).Elem()
)

// GreeterServiceClientType .
func GreeterServiceClientType() reflect.Type { return greeterServiceClientType }

// GreeterServiceServerType .
func GreeterServiceServerType() reflect.Type { return greeterServiceServerType }

// UserServiceClientType .
func UserServiceClientType() reflect.Type { return userServiceClientType }

// UserServiceServerType .
func UserServiceServerType() reflect.Type { return userServiceServerType }

func Types() []reflect.Type {
	return []reflect.Type{
		// client types
		greeterServiceClientType,
		userServiceClientType,
		// server types
		greeterServiceServerType,
		userServiceServerType,
	}
}
